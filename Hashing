#include <stdio.h>
#define TABLE_SIZE 20

int hashTable[TABLE_SIZE];

void initializeHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = -1;
    }
}

int hashFunction(int key) {
    return key % TABLE_SIZE;
}

void insertKey(int key) {
    int index = hashFunction(key);
    while (hashTable[index] != -1) {
        index = (index + 1) % TABLE_SIZE;
    }
    hashTable[index] = key;
}

int searchKey(int key) {
    int index = hashFunction(key);
    int startIndex = index;
    while (hashTable[index] != -1) {
        if (hashTable[index] == key) {
            return index;
        }
        index = (index + 1) % TABLE_SIZE;
        if (index == startIndex) {
            break;
        }
    }
    return -1;
}

int main() {
    initializeHashTable();

    int keys[] = {1234, 5678, 9101, 1112, 1314};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < n; i++) {
        insertKey(keys[i]);
    }

    int keyToSearch = 5678;
    int foundIndex = searchKey(keyToSearch);
    if (foundIndex != -1) {
        printf("Key %d found at index %d\n", keyToSearch, foundIndex);
    } else {
        printf("Key %d not found\n", keyToSearch);
    }

    return 0;
}
