#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head;
    new_node->data = data;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
        return;
    }

    while (last->next != NULL) {
        last = last->next;
    }

    last->next = new_node;
}

void display(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

void sort(struct Node* head) {
    struct Node *i, *j;
    int temp;

    if (head == NULL) return;

    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void reverse(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void concatenate(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }

    struct Node* last = *head1;
    while (last->next != NULL) {
        last = last->next;
    }

    last->next = head2;
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    insert(&list1, 5);
    insert(&list1, 1);
    insert(&list1, 3);
    insert(&list1, 2);

    printf("Original List 1:\n");
    display(list1);

    sort(list1);
    printf("Sorted List 1:\n");
    display(list1);

    reverse(&list1);
    printf("Reversed List 1:\n");
    display(list1);

    insert(&list2, 8);
    insert(&list2, 6);
    insert(&list2, 7);

    printf("Original List 2:\n");
    display(list2);

    concatenate(&list1, list2);
    printf("Concatenated List 1 and List 2:\n");
    display(list1);

    return 0;
}
